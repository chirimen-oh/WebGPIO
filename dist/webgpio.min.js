"use strict";!function(){window.GPIOAccess||(window.GPIOAccess=function(n){this.init(n)},GPIOAccess.prototype={init:function(n){this.ports=new GPIOPortMap,navigator.mozGpio["export"](n),this.ports.set(n-0,new GPIOPort(n)),console.log("size="+this.ports.size)}})}(),function(){window.GPIOPort||(window.GPIOPort=function(n){this.init(n)},GPIOPort.prototype={init:function(n){this.portNumber=n,this.portName="",this.pinName="",this.direction="",this.exported=!1,this._interval=30,this.value=null,this._timer=null},"export":function(n){return new Promise(o).then(t)["catch"](e);var o,t,e},unexport:function(n){},read:function(){return new Promise(n);var n},write:function(n){return new Promise(o);var o},onchange:null,checkValue:function(n){n.read().then(function(o){null!=n.value&&parseInt(o)!=parseInt(n.value)&&("function"==typeof n.onchange?n.onchange(o):console.log("port.onchange is not a function.")),n.value=o},function(){console.log("check value error")})},setDirection:function(n){return GPIOPort["export"](n)},isInput:function(){return"in"===this.direction},__checkValue:function(n){n.read().then(function(o){parseInt(o)!=parseInt(n.value)&&("function"==typeof n.onchange?n.onchange(o):console.log("port.onchange is not a function.")),n.value=o})["catch"](function(n){return Promise.reject(new Error("check value error"))})}})}(),function(){window.GPIOPortMap||(window.GPIOPortMap=Map)}(),function(){navigator.requestGPIOAccess||(navigator.requestGPIOAccess=function(n){return new Promise(function(o,t){var e=new GPIOAccess(n);o(e)})})}(),function(){navigator.mozGpio||(navigator.mozGpio=new Object,navigator.mozGpio["export"]=function(n){},navigator.mozGpio.unexport=function(n){},navigator.mozGpio.setValue=function(n,o){console.log("setValue("+n+","+o+")")},navigator.mozGpio.getValue=function(n){return n},navigator.mozGpio.setDirection=function(n,o){console.log("setDirection("+n+","+o+")")},navigator.mozGpio.getDirection=function(){return"out"})}();